

skipPlayersTurn

If it's the first move, call helper method A, inject the player. Test method A separately. Test method A. Method A should return one true and one false only. (This should be a separate method called skipPlayersFirstTurn.)

Else call helper method B, inject the player. Test method B. Method B should return one true and one false only. (This should be a separate method called skipPlayersSubsequentTurn.)

For method B:

Do not skip my turn (return false):
Lpc n, Cpc n: draw nothing, do not skip my turn
Lpc w, Cpc n: draw nothing, do not skip my turn
Lpc nn-nw, Cpc nn-nw: draw nothing, do not skip my turn
Lpc n, Cpc w: set my color to other player's preferred color, do not skip my turn
Lpc w, Cpc w: set my color to other player's preferred color, do not skip my turn

Skip my turn (return true)
Lpc n, Cpc nn-nw: skip my turn and potentially draw
Lpc w, Cpc nn-nw: skip my turn and potentially draw

Blow up  throw an illegal state exception (put user warning in the exception:): Lpc nn-nw, Cpc n: (should never happen)
Lpc nn-nw, Cpc w: (should never happen)






Main

    game.startGame() // (possible automatic moves: player2 might draw or discard, player1 might draw)
    while player1.getscore < 500 && player2.getscore < 500
        display cpc, player1's hand, "your turn, player one"
        Let playerOneHasDiscarded be false
        while playerOneHasDiscarded is false
            ask player 1 what they want to do (give a numbered list of choices)
            if the choice is draw
                draw a card
                break
            if (choice is discard) or (choice is discard and declare 'Cero plus one!')
                if (choice is discard and declare 'Cero plus one!') and player1.getHand.getSize != 2
                   warn user
                   break
                if discard is not valid choice for cpc
                   warn user
                   break
                if discard is colorless
                    ask the user to pick a color
                else
                    let player's chosen color be the cpc color
                if choice is discard and declare 'Cero plus one!'
                    call player1.discard(card, cpc, true)
                else
                    call player1.discard(card, cpc, false)




Player

    public Card getBoldStrategyCard(Card currentPlayedCard, String currentColor)
        if cpc is wild
            return highest numeric face of currentColor
        else
            // try to match the number
            let card1 be the number from the largest color group that matches cpc.color

            // try to match the color
            let card2 be the highest numeric face of cpc.color

            // compare the two, return the one with the highest card group
            if card1 is not null and card2 is not null
                if hand.getColorGroupSize(card1.color) > hand.getColorGroupSize(card1.color)
                    return card1
                else
                    return card2

            if card1 is not null or card2 is not null
                if card1 is not null
                    return card1
                else
                    return card2

            if hand has card wild
                return a new wild card

            if hand has card wild draw four
                return a new wild draw four


    public Card getCautiousStrategyCard(Card currentPlayedCard, String currentColor)
        if cpc is wild
            return highest non-numeric face of current color
        else
            if hand has card wild
                return a new wild card

            if hand has card wild draw four
                return a new wild draw four

            // try to match the number
            let card1 be the number from the largest color group that matches cpc.color

            // try to match the color
            let card2 be the highest non-numeric face of cpc.color

            // compare the two, return the one with the highest value
            if card1 is not null and card2 is not null
                if hand.getHighestFace(color, false) > hand.getHighestFace(color, false)
                    return card1
                else
                    return card2

            if card1 is not null or card2 is not null
                if card1 is not null
                    return card1
                else
                    return card2



public boolean skipPlayersTurn(player)
	player has to skip its turn and potentially draw cards if
	    cpc is nn and lpc is n
	player does not have to draw cards or skip if
	    cpc is numeric, lpc is anything






        // stop player from reacting to non-numeric cards that it played last time  
        // as if they were discarded by player one.
        // if(currentPlayedCard.equals(player.getMyLastPlayedCard())) {
        if(currentPlayedCard.isNumberCard()) {
            return false;
        }
        if(!currentPlayedCard.isNumberCard() && !player.getMyLastPlayedCard().isNumberCard()) {
            // act as if a numeric card was received.
            return !player.getMyLastPlayedCard().equals(new Card(Card.COLORLESS, Card.WILD, cvm));
        } else {
            String face = currentPlayedCard.getFace();
            if (face.equalsIgnoreCase(Card.SKIP)) {
                return true;
            }
            if (face.equalsIgnoreCase(Card.REVERSE)) {
                return true;
            }
            if (face.equalsIgnoreCase(Card.DRAW_TWO)) {
                for(int i = 0; i < 2; i++) {
                    draw(player);
                }
                return true;
            }
            if(!isFirstMove) { // don't need to check for this...
                if (face.equalsIgnoreCase(Card.WILD) || face.equalsIgnoreCase(Card.WILD_DRAW_FOUR)) {
                    currentColor = getOtherPlayersChosenColor(player);
                } else {
                    currentColor = currentPlayedCard.getColor();
                }
                if(face.equalsIgnoreCase(Card.WILD_DRAW_FOUR)) {
                    for(int i = 0; i < 4; i++) {
                        draw(player);
                    }
                }
                return true;
            }
            return false;
        }
        // return false;














GRAVEYARD:



Game.playerTwoMove
    if everything is validated and OK to proceed
        let cardToDiscard be an uninitialized card
        let playerTwoHasDiscarded be a false boolean
            while playerTwoHasDiscarded is false
                let cardToDiscard be player2's decided move on the cpc
                    if cardToDiscard is null
                        player two draws a card
                    else



Player.discard

    remove card from p1's hand
    discarded card becomes cpc
    push cpc to discard pile
    let current color be player's chosen color
    playerOneHasDiscarded = true
    if the choice is (discard and declare 'Cero plus one!')
        call player's callCero method



public GameState startGame()
	let isFirstMove = true
	shuffle deck
	deal cards
	verify currentPlayedCard (cpc) is not colorless
	push cpc to discard pile
	let currentColor be the cpc's color
	update player1's and player2's other player hand counts
	let gameStateMessage be an empty string
	if it is player2's turn
		update gameStateMessage (gsm) "player two had the first move"
		if nonNumericCardReceived(player2) is true // don't need to ask other player for color choice here -- no wild cards allowed first move
			update gameStateMessage (gsm) "player two was forbidden from discarding"
		else
			let gameStateMessage = playerTwosTurn(gameStateMessage)
		let isPlayerOnesTurn = !isPlayerOnesTurn // only happens here!
	else // is player one's turn
		if nonNumericCardReceived(player1) is true // don't need to ask other player for color choice here -- no wild cards allowed first move
			update gameStateMessage (gsm) "player one, you were forbidden from discarding"
			let gameStateMessage = playerTwosTurn(gameStateMessage)
	populate gameState's fields
	return gameState



public String playerTwosTurn(gameStateMessage)
	let newGameStateMessage = gameStateMessage
	if this is not player two's turn
		append "wat are you doing. not player two's turn. no action taken." to gameStateMessage
		return gameStateMessage
	else
		let cpc be equal to the return of playerTwoMove() // player 2 is REQUIRED to discard something here
		if cpc == null
			return "warn: playerTwoMove returned null. no action taken."
		else
			let currentColor be the cpc's color
			push cpc to discard pile
			update gsm "Player two has discarded a card."
			return newGameStateMessage



// guarantee only reached if player two has not been blocked by a non-numeric card
public Card playerTwoMove()
	if the deck is empty and the discard pile is empty
		print a warning to the console and return null
	if this is not player two's turn
		print warning to console - not player two's turn. no action taken, returning null.
		return null
	else
		let strategy be player2's strategy
		let cardToDiscard be an empty card
		switch strategy
			case bold
				// todo
				// player2 would draw here as needed
				return cardToDiscard // just discard first card for debug
			case cautious
				// todo
				// player2 would draw here as needed
				return cardToDiscard // just discard first card for debug
			case dumb
				// todo
				// player2 would draw here as needed
				return cardToDiscard // just discard first card for debug








































