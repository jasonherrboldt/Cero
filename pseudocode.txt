


        /* main pseudocode
        Welcome the user, get name.
        inner winner exists = false
        Game game = new Game(user's name)
        game.playFirstHand (handles auto skipping and auto draws as needed)

        while both player's scores are < 500
            it is now player one's turn
            if !skipTurn(player 1) // handles auto draws
                prompt user to move // discard proceeded by possible draws
                while discarded card is not valid
                    prompt user to try again or draw
                else
                    if player one has discarded last card
                        inner winner exists
                        if inner winner doesn't exist
                            if !skipTurn(player 2) // handles auto draws
                                player two moves
                                if player two has no cards left
                                    inner winner exists
            else // player one is forbidden from discarding
                player two moves // no need to check for turn skipping or auto drawing
                if player two has discarded last card
                    inner winner exists
            if inner winner exists
                update winner's score
                    if either winner's score is >= 500
                        announce winner // while loop exits
                    else
                        start a new inner game
                        game.playFirstHand
                        // back to the top
                inner winner exists = false
         */



Identify where each of these actions occurs:

if player two discards a wild or a wd4
    player two must pick a color (Game.playerTwoMove -- under construction)
    player two must set its own chosen color (Game.playerTwoMove calls Player.setChosenColor)
    player two must tell the game object what its chosen color is (Game.playerTwoMove calls Game.setCurrentColor)
    the game object must tell player one what player two's chosen color is (Main.main calls Game.getCurrentColor)

if player one discards a wild or a wd4
    player one must pick a color (Main.main calls getUserResponse_chosenColor)
    player one must tell the game object what its chosen color is (Main.main calls Game.[???] which calls Game.setCurrentColor
    player two must be able to get that color to decide its next move (Game.playerTwoMove calls Game.getCurrentColor)





















GRAVEYARD:


@Ignore tests:

    * TestGame.testGame_playFirstHand_switchP1Move_drawTwo
    * TestGame.testGame_playFirstHand_switchP1Move_skip
    * TestGame.testGame_playFirstHand_switchP1Move_reverse
    * TestGame.testGame_skipTurn_lpcNumeric_cpcNumeric_p2
    * TestGame.testGame_skipTurn_lpc_cpc_NonNumericNonWild_p1
    * TestGame.testGame_playerTwoMove
    * TestPlayer.testPlayer_changeStrategy



Here are some scenarios that throw the illegal discard exception:

SCENARIO #1:

Starting game, playing the first hand...

The current played card is (Yellow) Draw Two

Game.draw just added the card (Blue) 6 to David Lightman's hand.

Game.draw just added the card Wild to David Lightman's hand.

David Lightman, you were forbidden from discarding. The first move switches to WOPR.

WOPR's hand:
01: (Green) 0
02: (Green) 3
03: (Green) 5
04: (Green) Reverse
05: (Blue) Reverse
06: (Blue) Skip
07: (Red) 7

Player Two is playing with a Cautious strategy.
ERROR: p2 attempted to discard an illegal card.
currentPlayedCard: (Yellow) Draw Two, hand: [(Green) 0, (Green) 3, (Green) 5, (Green) Reverse, (Blue) Reverse, (Blue) Skip, (Red) 7]
cardToDiscard: (Green) Reverse

Process finished with exit code 1


SCENARIO #2:

The current played card is (Yellow) Draw Two

Game.draw just added the card (Red) Reverse to Player One's hand.

Game.draw just added the card (Yellow) 4 to Player One's hand.

Player One, you were forbidden from discarding. The first move switches to WOPR.

WOPR's hand:
01: (Blue) 5
02: (Blue) 6
03: (Blue) Reverse
04: (Red) 1
05: (Red) 4
06: (Yellow) Draw Two
07: Wild Draw Four

Player Two is playing with a Bold strategy.
ERROR: p2 attempted to discard an illegal card.
currentPlayedCard: (Yellow) Draw Two, hand: [(Blue) 5, (Blue) 6, (Blue) Reverse, (Red) 1, (Red) 4, (Yellow) Draw Two, Wild Draw Four]
cardToDiscard: (Blue) Reverse



SCENARIO #3:

The current played card is (Yellow) Draw Two

Game.draw just added the card (Green) 6 to Player One's hand.

Game.draw just added the card (Green) Draw Two to Player One's hand.

Player One, you were forbidden from discarding. The first move switches to WOPR.

WOPR's hand:
01: (Red) 6
02: (Red) Reverse
03: (Green) 1
04: (Green) Skip
05: (Yellow) 3
06: (Blue) 8
07: Wild Draw Four

Player Two is playing with a Bold strategy.
ERROR: p2 attempted to discard an illegal card.
currentPlayedCard: (Yellow) Draw Two, hand: [(Red) 6, (Red) Reverse, (Green) 1, (Green) Skip, (Yellow) 3, (Blue) 8, Wild Draw Four]
cardToDiscard: (Red) Reverse



SCENARIO #4:

The current played card is (Yellow) Draw Two

Game.draw just added the card (Blue) 0 to Player One's hand.

Game.draw just added the card Wild to Player One's hand.

Player One, you were forbidden from discarding. The first move switches to WOPR.

WOPR's hand:
01: (Blue) 3
02: (Blue) 8
03: (Blue) Reverse
04: (Green) 4
05: (Green) 9
06: (Red) 3
07: (Yellow) 2

Player Two is playing with a Bold strategy.
oh hai from Player.isLegalDiscard.
ERROR: p2 attempted to discard an illegal card.
currentPlayedCard: (Yellow) Draw Two, hand: [(Blue) 3, (Blue) 8, (Blue) Reverse, (Green) 4, (Green) 9, (Red) 3, (Yellow) 2]
cardToDiscard: (Blue) Reverse



SCENARIO #5:

The current played card is (Blue) Reverse

Player One, you were forbidden from discarding. The first move switches to WOPR.


WOPR's hand:
01: (Green) 8
02: (Green) 8
03: (Green) 9
04: (Red) 7
05: (Red) 9
06: (Yellow) Skip
07: (Blue) 4

Player Two is playing with a Cautious strategy.
oh hai from Player.isLegalDiscard.
cardToDiscard: (Yellow) Skip, currentPlayedCard: (Blue) Reverse, currentColor:Blue
oh hai from conditional } else {.
ERROR: p2 attempted to discard an illegal card.
currentPlayedCard: (Blue) Reverse, hand: [(Green) 8, (Green) 8, (Green) 9, (Red) 7, (Red) 9, (Yellow) Skip, (Blue) 4]
cardToDiscard: (Yellow) Skip



SCENARIO #6:

******* fucking found it *******

oh hai from Game.startGame. cpc has just been changed to (Blue) Reverse

The current played card is (Blue) Reverse
oh hai from Game.skipFirstTurn. About to set the other player's lpc:
Other player's lpc is null
Switch done. Other player's lpc is now (Blue) Reverse

Player One, you were forbidden from discarding. The first move switches to WOPR.


WOPR's hand:
01: (Yellow) 1
02: (Yellow) 9
03: (Yellow) Skip
04: (Green) 1
05: (Green) 5
06: (Red) 8
07: (Blue) Reverse

Player Two is playing with a Bold strategy.
oh hai from Game.playerTwoMove. cpc: (Blue) Reverse
oh hai from Player.getCautiousStrategyCard. About to return the card (Yellow) Skip // ******* ******* ******* lol nope ******* ******* *******
oh hai from Player.isLegalDiscard.
cardToDiscard: (Yellow) Skip, currentPlayedCard: (Blue) Reverse, currentColor:Blue
oh hai from conditional } else {.
cardToDiscardColor: Yellow
cardToDiscardFace: Skip
currentPlayedCardColor: Blue
currentPlayedCardFace: Reverse
cardToDiscard.getFace().equalsIgnoreCase(Card.WILD) = false
cardToDiscard.getFace().equalsIgnoreCase(Card.WILD_DRAW_FOUR) = false
cardToDiscard.getColor().equalsIgnoreCase(currentPlayedCard.getColor() = false
cardToDiscard.getFace().equalsIgnoreCase(currentPlayedCard.getFace() = false
ERROR: p2 attempted to discard an illegal card.
currentPlayedCard: (Blue) Reverse, hand: [(Yellow) 1, (Yellow) 9, (Yellow) Skip, (Green) 1, (Green) 5, (Red) 8, (Blue) Reverse]
cardToDiscard: (Yellow) Skip



FINALLY found the culprit:

first with bold:

Player Two is playing with a Bold strategy.
oh hai from Game.playerTwoMove. cpc: (Yellow) Draw Two
oh hai from Player.getCautiousStrategyCard. About to return the card numberMatch (1): (Blue) Reverse
oh hai from Player.isLegalDiscard.
cardToDiscard: (Blue) Reverse, currentPlayedCard: (Yellow) Draw Two, currentColor:Yellow
ERROR: p2 attempted to discard an illegal card.
currentPlayedCard: (Yellow) Draw Two, hand: [(Blue) 4, (Blue) 9, (Blue) Reverse, (Green) Reverse, (Green) Skip, (Red) 4, Wild Draw Four]
cardToDiscard: (Blue) Reverse

and again with cautious:

Player Two is playing with a Cautious strategy.
oh hai from Game.playerTwoMove. cpc: (Green) Skip
oh hai from Player.getCautiousStrategyCard. About to return the card numberMatch (1): (Blue) Reverse
oh hai from Player.isLegalDiscard.
cardToDiscard: (Blue) Reverse, currentPlayedCard: (Green) Skip, currentColor:Green
ERROR: p2 attempted to discard an illegal card.
currentPlayedCard: (Green) Skip, hand: [(Yellow) 4, (Yellow) 9, (Green) 6, (Green) 5, (Blue) 9, (Blue) Reverse, (Red) Draw Two]
cardToDiscard: (Blue) Reverse




boolean skipTurn (player)
if the cpc is numeric
    return false
if the cpc is nn-nw
    if my lpc is nn // lpc should never be null because 1st turn has already come and gone (showstopper)
        // this is player's last discarded nn
        return false (do not skip my turn)
    else
        if cpc is wd4, draw two, reverse, or skip
            if cpc is draw two
                draw two cards
            else if cpc is draw four
                draw four cards
            return true (do skip my turn)
        else if cpc is wild
            set my color to p1s chosen color
            return false (do not skip my turn)




Main

    game.startGame() // (possible automatic moves: player2 might draw or discard, player1 might draw)
    while player1.getscore < 500 && player2.getscore < 500
        display cpc, player1's hand, "your turn, player one"
        Let playerOneHasDiscarded be false
        while playerOneHasDiscarded is false
            ask player 1 what they want to do (give a numbered list of choices)
            if the choice is draw
                draw a card
                break
            if (choice is discard) or (choice is discard and declare 'Cero plus one!')
                if (choice is discard and declare 'Cero plus one!') and player1.getHand.getSize != 2
                   warn user
                   break
                if discard is not valid choice for cpc
                   warn user
                   break
                if discard is colorless
                    ask the user to pick a color
                else
                    let player's chosen color be the cpc color
                if choice is discard and declare 'Cero plus one!'
                    call player1.discard(card, cpc, true)
                else
                    call player1.discard(card, cpc, false)




Game.playerTwoMove
    if everything is validated and OK to proceed
        let cardToDiscard be an uninitialized card
        let playerTwoHasDiscarded be a false boolean
            while playerTwoHasDiscarded is false
                let cardToDiscard be player2's decided move on the cpc
                    if cardToDiscard is null
                        player two draws a card
                    else





Player.discard

    remove card from p1's hand
    discarded card becomes cpc
    push cpc to discard pile
    let current color be player's chosen color
    playerOneHasDiscarded = true
    if the choice is (discard and declare 'Cero plus one!')
        call player's callCero method



public GameState startGame()
	let isFirstMove = true
	shuffle deck
	deal cards
	verify currentPlayedCard (cpc) is not colorless
	push cpc to discard pile
	let currentColor be the cpc's color
	update player1's and player2's other player hand counts
	let gameStateMessage be an empty string
	if it is player2's turn
		update gameStateMessage (gsm) "player two had the first move"
		if nonNumericCardReceived(player2) is true // don't need to ask other player for color choice here -- no wild cards allowed first move
			update gameStateMessage (gsm) "player two was forbidden from discarding"
		else
			let gameStateMessage = playerTwosTurn(gameStateMessage)
		let isPlayerOnesTurn = !isPlayerOnesTurn // only happens here!
	else // is player one's turn
		if nonNumericCardReceived(player1) is true // don't need to ask other player for color choice here -- no wild cards allowed first move
			update gameStateMessage (gsm) "player one, you were forbidden from discarding"
			let gameStateMessage = playerTwosTurn(gameStateMessage)
	populate gameState's fields
	return gameState


public boolean nonNumericCardReceived(player)
	if cpc is skip
		return true
	if cpc is reverse
		return true
	if cpc is draw two
		make player draw two cards
		return true
	if isFirstMove = false
		if cpc is wild or cpc is wild draw four
			let the current color be the other player's chosen color
			if cpc is wild draw four
				make player draw four cards
			return true
	return false



public String playerTwosTurn(gameStateMessage)
	let newGameStateMessage = gameStateMessage
	if this is not player two's turn
		append "wat are you doing. not player two's turn. no action taken." to gameStateMessage
		return gameStateMessage
	else
		let cpc be equal to the return of playerTwoMove() // player 2 is REQUIRED to discard something here
		if cpc == null
			return "warn: playerTwoMove returned null. no action taken."
		else
			let currentColor be the cpc's color
			push cpc to discard pile
			update gsm "Player two has discarded a card."
			return newGameStateMessage



// guarantee only reached if player two has not been blocked by a non-numeric card
public Card playerTwoMove()
	if the deck is empty and the discard pile is empty
		print a warning to the console and return null
	if this is not player two's turn
		print warning to console - not player two's turn. no action taken, returning null.
		return null
	else
		let strategy be player2's strategy
		let cardToDiscard be an empty card
		switch strategy
			case bold
				// todo
				// player2 would draw here as needed
				return cardToDiscard // just discard first card for debug
			case cautious
				// todo
				// player2 would draw here as needed
				return cardToDiscard // just discard first card for debug
			case dumb
				// todo
				// player2 would draw here as needed
				return cardToDiscard // just discard first card for debug




        For testGame_skipTurn:

        Do not skip my turn (return false):
        Lpc n, Cpc n: draw nothing, do not skip my turn (done)
        Lpc w, Cpc n: draw nothing, do not skip my turn (done)
        Lpc nn-nw, Cpc nn-nw: (same card bouncing back) draw nothing, do not skip my turn (done)
        Lpc n, Cpc w: set my color to other player's preferred color, draw nothing, do not skip my turn (done)
        Lpc w, Cpc w: set my color to other player's preferred color, draw nothing, do not skip my turn (done)

        Skip my turn (return true)
        Lpc n, Cpc nn-nw: skip my turn and potentially draw (draw two) (done)
        Lpc n, Cpc nn-nw: skip my turn and potentially draw (skip) (done)
        Lpc n, Cpc nn-nw: skip my turn and potentially draw (reverse) (done)
        Lpc n, Cpc nn-nw: skip my turn and potentially draw (draw four) (done)
        Lpc w, Cpc nn-nw: skip my turn and potentially draw (draw two) (done)
        Lpc w, Cpc nn-nw: skip my turn and potentially draw (skip) (done)
        Lpc w, Cpc nn-nw: skip my turn and potentially draw (reverse) (done)
        Lpc w, Cpc nn-nw: skip my turn and potentially draw (draw four) (done)

        Blow up — throw an illegal state exception (put user warning in the exception:):
        Lpc nn-nw, Cpc n: (should never happen - other user should have skipped a turn)
        Lpc nn-nw, Cpc w: (should never happen - other user should have skipped a turn)














from Player.isLegalDiscard (1/7):


//            if(cardToDiscard.getFace().equalsIgnoreCase(Card.WILD) || cardToDiscard.getFace().equalsIgnoreCase(Card.WILD_DRAW_FOUR)) {
//                return true;
//            } else {
//                if(cardToDiscard.isNumeric()) {
//                    if(cardToDiscard.getColor().equalsIgnoreCase(currentPlayedCard.getColor()) ||
//                            cardToDiscard.getFace().equalsIgnoreCase(currentPlayedCard.getFace())) {
//                        return true;
//                    } else {
//                        return false; // illegal card choice
//                    }
//                } else { // guaranteed by 1st part of this method to be skip, reverse, or draw two.
//                    if(cardToDiscard.getColor().equalsIgnoreCase(currentPlayedCard.getColor())) {
//                        return true;
//                    } else {
//                        return false;
//                    }
//                }

//                String cardToDiscardColor = cardToDiscard.getColor();
//                String currentPlayedCardColor = currentPlayedCard.getColor();
//                String cardToDiscardFace = cardToDiscard.getFace();
//                String currentPlayedCardFace = currentPlayedCard.getFace();
//                boolean returnVal = cardToDiscardColor.equalsIgnoreCase(currentPlayedCardColor)
//                        || cardToDiscardFace.equalsIgnoreCase(currentPlayedCardFace);
//                return returnVal;
//            }

                // discarding a wild or WD4 is always legal:
//                if (cardToDiscard.getFace().equalsIgnoreCase(Card.WILD)
//                        || cardToDiscard.getFace().equalsIgnoreCase(Card.WILD_DRAW_FOUR)) {
//                    return true;
//                } else {
//
//                // this means the card is either numeric or non-numeric color (skip, reverse, draw two).
//                // (non-numeric colors are cards that forced the other player to skip a turn, and have
//                // come back around - but this player must still match either the color or the face or both.)
//                    return cardToDiscard.getColor().equalsIgnoreCase(currentPlayedCard.getColor())
//                            || cardToDiscard.getFace().equalsIgnoreCase(currentPlayedCard.getFace());
//                }


















